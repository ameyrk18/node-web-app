// Change these variables as per your needs, cane be further fined tuned as per the project needs
def repo = "node-web-app"
def repo_url = "https://github.com/ameyrk18/${repo}.git"


pipeline {
    agent any
    environment {
        // Change these variables as per your needs, cane be further fined tuned as per the project needs
        IMAGE_NAME = 'node-web-app'
        IMAGE_NAME_FULL = 'registry.hub.docker.com/ameyrk/node-web-app'
        DOCKERFILE_PATH = './'
        IMAGE_REGISTRY = 'registry.hub.docker.com'
        SLACK_CHANNEL = 'web-app-team'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'git-hub', url: repo_url]]])
            }
        }


        stage ('Unit testing pre-requisites'){
            steps{
                sh 'npm prune' // remove old packages
                sh 'npm install' // install packages
                sh 'npm install -g pm2@latest' // install pm2 to start the node js app
                sh 'npm install -g mocha' // install mocha test suite
                sh 'pm2 start server.js -f' // start application
                sh 'sleep 2'
            }
        }

        stage('Start unit testing') {
            steps {
                sh 'mocha' // run tests
                sh 'pm2 stop server' // stop app
            }
        }
        // Snyk security code base scanning
        stage('Scan codebase') {
            steps {
                snykSecurity(
                        snykTokenId: 'snyk-key',
                        snykInstallation: 'SNYK_LATEST',
                        severity: 'low',
                        failOnIssues: 'true',
                        organisation: 'ameyrk18'
                )
            }
        }

        stage('Build, Push') {
            steps('Build & Push') {
                script {
                    def IMAGE_TAG_EXPRESSION = "${BUILD_NUMBER}"
                    docker.withRegistry("https://${IMAGE_REGISTRY}", 'docker-hub-cred') {
                        def image = docker.build("${IMAGE_NAME_FULL}", "${DOCKERFILE_PATH}")
                        image.push("${IMAGE_TAG_EXPRESSION}")
                        image.push("latest")
                    }
                }
            }
        }
    }
}


